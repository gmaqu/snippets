[SERVICE]
  Flush         1
  Log_Level     error
  Parsers_File  parsers_custom.conf

# [INPUT]
#   Name                random
#   Tag                 dataplane.systemd.kubelet.*
#   Samples             10

# [INPUT]
#   Name                tail
#   Path                /var/log/containers/klog-sample.log
#   Tag                 dataplane.systemd.kubelet
#   Read_From_Head      true

[INPUT]
  Name                systemd
  Tag                 dataplane.systemd.kubelet.*
  Systemd_Filter      _SYSTEMD_UNIT=fb-test.service
  Path                /var/log/journal
  Read_From_Tail      True

[FILTER]
  Name                record_modifier
  Match               dataplane.systemd.kubelet.*
  Remove_key          CMDLINE

[FILTER]
  Name                      multiline
  Match                     dataplane.systemd.kubelet.*
  multiline.key_content     MESSAGE
  multiline.parser          klog_multiline

# [FILTER]
#   Name    Lua
#   Match   dataplane.systemd.kubelet
#   script  klog_multiline_merge.lua
#   call    klog_multiline_merge

# Inline script
#   code    function cb_print(tag, timestamp, record) print("in cb print") new_record = record new_record["message"] = "new" return 1, timestamp, new_record end
#   code  fb_klog_buffer = { buffer = "" } function klog_multiline_merge(tag, timestamp, record) local log = record.MESSAGE if not log or log == "" then return -1, timestamp, {} end local KLOG_START_PATTERN = "^([TDIWEF])(%d%d)(%d%d)%s(%d+:%d+:%d+%.%d+)%s+(%d+)%s+([%w%p]+)]%s+(.*)" local is_new_log = string.find(log, KLOG_START_PATTERN) if is_new_log then print("New klog detected") if fb_klog_buffer.buffer ~= "" then local completed_log = fb_klog_buffer.buffer fb_klog_buffer.buffer = log print("Flush the previous log") print(completed_log) return 1, timestamp, { log = completed_log } else fb_klog_buffer.buffer = "" fb_klog_buffer.buffer = log end else print("Merge continuation of log") fb_klog_buffer.buffer = fb_klog_buffer.buffer.. " " .. log end return -1, timestamp, {} end

[OUTPUT]
  Name  stdout
  Match dataplane.systemd.kubelet.*
