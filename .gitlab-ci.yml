default:
  image: ${ECR_LOCATION}/pipeline-job-image:${PIPELINE_JOB_TAG}
  
before_script:
  - HOME="${CI_PROJECT_DIR}"
  - aws ecr get-login-password | helm registry login --debug --username AWS --password-stdin "${ECR_LOCATION}"
  - aws codeartifact login --tool npm --repository ${CODE_ART_REGISTRY} --domain ${CODE_ART_DOMAIN} --domain-owner ${CODE_ART_ACCOUNT} --region ${AWS_REGION}
  - PATH="${PATH}:$(realpath .)/scripts:$(realpath .)/cdk/node_modules/.bin"

variables:
  CODE_ART_REGISTRY: some-registry
  CODE_ART_DOMAIN: some-domain
  CODE_ART_ACCOUNT: 123456789123
  AWS_REGION: "eu-west-2"
  LAMBDA_PATH: "${CI_PROJECT_DIR}/cdk/lambda/my-lambda"

stages:
  - .pre
  - static
  - build
  - publish
  - tag
    
#
# Lint the source code, and calculate the application version
#
initialise:
  stage: .pre
  script:
    - ./scripts/lint
    - ./scripts/version >variables.env
  artifacts:
    reports:
      dotenv: variables.env
      
#
# Black Duck scan
#
black-duck:
  stage: static
  needs:
    - job: initialise
      artifacts: true
  script:
    static-analysis-black-duck --maven-registry-token "${MAVEN_REGISTRY_TOKEN}" --ci-project-name "${CI_PROJECT_NAME}" --ci-commit-branch "${CI_COMMIT_BRANCH}" --ci-job-id "${CI_JOB_ID}"
  artifacts:
    when: always
    paths:
      - "*.bdio"
  rules:
    - if: ($CI_COMMIT_BRANCH == "main")

#
# Sonarqube scan
#
sonarqube:
  stage: static
  needs:
    - job: initialise
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    static-analysis-sonarscanner-cli --maven-registry-token "${MAVEN_REGISTRY_TOKEN}" --ci-project-name "${CI_PROJECT_NAME}"
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success
  
#
# Bundle CDK constructs & Lambda code
#
build:
  stage: build
  needs:
    - job: initialise
      artifacts: true
    - job: sonarqube
  script:
    - echo "Component ${COMPONENT}"
    - ./scripts/build
  artifacts:
    expire_in: 1 day
    paths:
      - ./target/
  rules:
    - if: '$CI_COMMIT_TAG'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: on_success
  
#
# Publish NPM package containing CDK App
#
publish:cdk:
  stage: publish
  needs:
    - job: initialise
      artifacts: true
    - job: build
      artifacts: true
  script: |
    ./scripts/publish
  rules:
    - if: ($CI_COMMIT_BRANCH == "main")
      when: on_success
    - if: '$CI_COMMIT_TAG'
      when: never

#
# Tag the Git commit on main with the application version   
#
tag:
  stage: tag
  needs:
    - job: initialise
      artifacts: true
  before_script:
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${CI_COMMIT_AUTHOR}"
  script: |
    if ! git show-ref -q tags/version=${VERSION}; then
      echo "Creating tag \"version=${VERSION}\""
      git tag version="${VERSION}"
    fi
    echo "Pushing tag \"version=${VERSION}\""
    git push "https://tag-token:${TAG_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" version="${VERSION}"
  rules:
    - if: ($CI_COMMIT_BRANCH == "main")
    
